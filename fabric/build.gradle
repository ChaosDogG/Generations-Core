plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

loom{
    silentMojangMappingsLicense()
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)
}

repositories {
    maven {
        url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
    }
    maven {
        url = "https://nexus.resourcefulbees.com/repository/maven-public/"
    }
    mavenLocal()
    mavenCentral()
    maven { url = "https://jitpack.io" } // BinarySMD
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings(loom.officialMojangMappings())
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    include(modApi "earth.terrarium:botarium-fabric-${rootProject.properties["minecraft_version"]}:${rootProject.properties["botarium_version"]}")


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.1.2")

    include(implementation("com.pixelmongenerations:RareCandy:${project.properties["rareCandy"]}"){
        transitive = false
    })
    include(implementation("org.tukaani:xz:${project.properties["rareCandyXZ"]}"))
    include(implementation("org.apache.commons:commons-compress:${project.properties["rareCandyCommonCompress"]}"))
    include(implementation("de.javagl:jgltf-model:${project.properties["rareCandyJgltfModel"]}"))
    include(implementation("com.github.thecodewarrior:BinarySMD:${project.properties["rareCandyBinarySMD"]}"){transitive = false})
    include(implementation("org.msgpack:msgpack-core:${project.properties["rareCandyMsgPackCore"]}"))
    include(implementation("com.google.flatbuffers:flatbuffers-java:23.3.3"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar.archiveClassifier.set("dev")

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
