plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    runs {
        data {
            data()
            programArgs("--all", "--mod", "generations_core")
            programArgs("--output", project(":common").file("src/main/generated/resources").absolutePath)
            programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
        }
    }

    silentMojangMappingsLicense()
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)

    forge {
        convertAccessWideners.set(true)
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig("GenerationsCore-common.mixins.json")
        mixinConfig("GenerationsCore.mixins.json")
    }
}

repositories {
    maven {
        url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url = "https://nexus.resourcefulbees.com/repository/maven-public/"
    }
    mavenCentral()
    maven { url = "https://jitpack.io" } // BinarySMD
    maven {
        name = "generationsMavenSnapshots"
        url = uri("https://maven.generations.gg/snapshots")
    }

    maven {
        url = "https://maven.bai.lol"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings(loom.officialMojangMappings())
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    include(modApi("earth.terrarium:botarium-forge-${rootProject.properties["minecraft_version"]}:${rootProject.properties["botarium_version"]}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    forgeRuntimeLibrary(include("gg.generations:RareCandy:${project.properties["rareCandy"]}"){transitive = false})
    forgeRuntimeLibrary(include("org.tukaani:xz:${project.properties["rareCandyXZ"]}"))
    forgeRuntimeLibrary(include("org.apache.commons:commons-compress:${project.properties["rareCandyCommonCompress"]}"))
    forgeRuntimeLibrary(include("de.javagl:jgltf-model:${project.properties["rareCandyJgltfModel"]}"))
    forgeRuntimeLibrary(include("com.github.thecodewarrior:BinarySMD:${project.properties["rareCandyBinarySMD"]}"){transitive = false})
    forgeRuntimeLibrary(include("org.msgpack:msgpack-core:${project.properties["rareCandyMsgPackCore"]}"))
    forgeRuntimeLibrary(include("com.google.flatbuffers:flatbuffers-java:23.3.3"))
    modRuntimeOnly("me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}")

    modCompileOnly "mcp.mobius.waila:wthit-api:forge-${project.properties["WTHIT"]}"
    modRuntimeOnly("mcp.mobius.waila:wthit:forge-${project.properties["WTHIT"]}")
    modRuntimeOnly("lol.bai:badpackets:forge-${project.properties["badPackets"]}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar.archiveClassifier.set("dev")

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
